
                          // GLOBAL VARIABLES
var lat;
var lon;
var mapDisplay;
var markers;
var googleMarkers = [];
var googleInfoWindows = [];
var activeInfoWindows = [];

                          // RUNS INIT IN DOCUMENT.READY

$(document).ready(function() {
  init();
});

function init() {

  console.log('map scripts loaded');

  var token = $('#api-token').val();
  console.log(token);
  $.ajaxSetup({
    headers:{
      "accept": "application/json",
      "token": token
  }
  });

                          // RATING MODEL

  var Rating = Backbone.Model.extend({
    defaults: {
      "mood": 5,
      "comment": "whatevs dude",
      "latitude": 90,
      "longitude": 0

    }
  });

                          // RATING BACKBONE VIEW, USES UNDERSCORE TEMPLATE TO RENDER

  var RatingView = Backbone.View.extend({
    tagName: 'tr',
    className: 'rating',
    template: _.template( $('#map-rating-template').html() ),
    render: function(){
      this.$el.empty();
      var html = this.template( this.model.toJSON() );
      var $html = $( html );
      this.$el.append( $html );
    },
    events:{
      'click button.remove': 'removeRating'
    },
    removeRating: function(){
      this.model.destroy();
      this.$el.remove();
    }
  });

                          // RATING BACKBONE LIST VIEW, APPENDS VIEWS AND RENDERS
                          // PUTS LATITIUDE, LONGITUDE, COMMENT AND MOOD INTO EMPTY MARKERS ARRAY

  var RatingListView = Backbone.View.extend({
    initialize: function(){
      this.listenTo(this.collection, 'add', this.render);
    },
    render: function(){
      this.$el.empty();
      markers = [];
      var ratings = this.collection.models;
      var view;
      for (var i = 0; i < ratings.length; i++) {
        var coordinates = [parseFloat(ratings[i].attributes.latitude), parseFloat(ratings[i].attributes.longitude), ratings[i].attributes.comment, ratings[i].attributes.mood];
        markers.push(coordinates);
        view = new RatingView({model: ratings[i]});
        view.render();
        this.$el.append( view.$el );
      }

    }
  });

                          // COLLECTION OF ALL USER'S RATINGS FOR DISPLAY ON MAP

  var MapRatingCollection = Backbone.Collection.extend({
    model: Rating,
    url: '/api/ratings/map_ratings'
  });

  var mapRatings = new MapRatingCollection();

  var MapRatingPainter = new RatingListView({
    collection: mapRatings,
    el: $('#map-ratings-list')
  });

  mapRatings.fetch();

                          // GETS CURRENT LOCATION USING GEOLOCATION,
                          // ADDS LISTENER EVENT TO MAP THAT MAKES MARKERS
                          // LOGS ERROR IF GEOLOCATION FAILS

  navigator.geolocation.getCurrentPosition(function(position) {
    console.log(position);
    lat = position.coords.latitude;
    lon = position.coords.longitude;

    mapDisplay = initMap(lat, lon);
    console.log(markers);

    google.maps.event.addListenerOnce(mapDisplay, 'idle', function(){
      makeMarkers(markers);
    });
  }, function(error) {
    console.log("Error:" + error.code + " " + error.message);
    lat =  40.761792;
    lon =  -73.965431;
  });

}

                          // CREATES GOOGLE MAP, DETERMINES ZOOM LEVEL, CENTERS ON CURRENT POSITION OF USER

function initMap(lat, lon) {
    var map;
    var currentLatLng;
    var zoom = 14;
    var mapEl = document.getElementById('map');

    currentLatLng = new google.maps.LatLng( lat, lon );
    map = new google.maps.Map( mapEl, {
        center: currentLatLng,
        zoom: zoom
    });

    return map;
}

                          // MAKES MARKERS, PLACES MESSAGE AND MOOD INDEXES OF MARKER ARRAY INTO VARIABLES
                          // CREATES GOOGLE MAP INFO WINDOWS
                          // PLACES VARIABLES INTO INFO WINDOW CONTENT

function makeMarkers(markers) {
  for(var i = 0; i < markers.length; i++) {
    var loc = markers[i];

    message = loc[2];
    mood = loc[3];

    var contentString = '<p>'+ mood + ': ' + message + '</p>';

    var infowindow = new google.maps.InfoWindow({
      content: contentString
    });

                          // PUSHES NEWLY CREATED INFO WINDOW INTO ARRAY

    googleInfoWindows.push(infowindow);

                          // SWITCH STATEMENT THAT PLACES CUSTOM MARKERS DEPENDING ON MATCHING MOOD RATING

                          /*

                          HEXCODE VALUES OF CUSTOM MARKERS

                          Mood00.png - #BF1E2E
                          Mood01.png - #EF4036
                          Mood02.png - #F1592A
                          Mood03.png - #F7941E
                          Mood04.png - #FCB040
                          Mood05.png - #F5EE31
                          Mood06.png - #D7DF21
                          Mood07.png - #8CC63F
                          Mood08.png - #39B54A
                          Mood09.png - #0B9444
                          Mood10.png - #056839

                           */

    var iconFileName;

    switch (mood) {
      case 0:
        iconFileName = "<%= asset_path("Mood00.png") %>"
        break;
      case 1:
        iconFileName = "<%= asset_path("Mood01.png") %>"
        break;
      case 2:
        iconFileName = "<%= asset_path("Mood02.png") %>"
        break;
      case 3:
        iconFileName = "<%= asset_path("Mood03.png") %>"
        break;
      case 4:
        iconFileName = "<%= asset_path("Mood04.png") %>"
        break;
      case 5:
        iconFileName = "<%= asset_path("Mood05.png") %>"
        break;
      case 6:
        iconFileName = "<%= asset_path("Mood06.png") %>"
        break;
      case 7:
        iconFileName = "<%= asset_path("Mood07.png") %>"
        break;
      case 8:
        iconFileName = "<%= asset_path("Mood08.png") %>"
        break;
      case 9:
        iconFileName = "<%= asset_path("Mood09.png") %>"
        break;
      case 10:
        iconFileName = "<%= asset_path("Mood10.png") %>"
        break;
    }

                          // CREATES NEW MARKER AND PLACES CUSTOM MARKER DEPENDING ON USER MOOD

    var newMarker = new google.maps.Marker({
      position: {lat: loc[0], lng: loc[1]},
      map: mapDisplay,
      icon: iconFileName

    });

                          // PUSHES NEW MARKERS INTO EMPTY ARRAY

    googleMarkers.push(newMarker)

    /* newMarker.addListener('click', function() {
      infowindow.open(mapDisplay, newMarker)
    }); */
  }

  console.log(googleInfoWindows);
  console.log(googleMarkers);

                          // CALLS ADDINFOWINDOWLISTENERS FUNCTION DEFINED BELOW

  addInfoWindowListeners();
}

                          // ASSIGNS INFO WINDOWS TO PROPER MARKER BY WAY OF ADDINFO FUNCTION

function addInfoWindowListeners() {
  for(var i = 0; i < googleInfoWindows.length; i++) {
    currentMarker = googleMarkers[i];
    currentInfoWindow = googleInfoWindows[i];

    addInfo(currentMarker, currentInfoWindow);

  }
}

                          // ON MARKER CLICK, ADDS MARKER LISTENER THAT CLEARS INFO WINDOW
                          // AND OPENS INFO WINDOW ON CLICKED MARKER
                          // PLACES INFO WINDOW AS INDEX IN EMPTY ACTIVE INFO WINDOW ARRAY

function addInfo(marker, infoWindow) {
  marker.addListener('click', function() {
    clearInfo();

    infoWindow.open(mapDisplay, marker);
    activeInfoWindows[0] = infoWindow;
  });
}

                          // ONLY ALLOWS ONE INFO WINDOW TO BE SHOWN AT A TIME
                          // IF NEW MARKER IS CLICKED AFTER PREVIOUS MARKER DISPLAYS INFO WINDOW,
                          // WILL CLOSE PREVIOUS INFO WINDOW AND OPEN NEWLY CLICKED MARKER'S INFO WINDOW

function clearInfo() {
  if(activeInfoWindows.length > 0) {
    activeInfoWindows[0].set("marker", null);
    activeInfoWindows[0].close();
    activeInfoWindows.length = 0;
  }
}
